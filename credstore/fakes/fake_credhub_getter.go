// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/credhub-cli/credhub/credentials"
	"github.com/pivotal-cf/on-demand-service-broker/credstore"
)

type FakeCredhubGetter struct {
	GetLatestVersionStub        func(name string) (credentials.Credential, error)
	getLatestVersionMutex       sync.RWMutex
	getLatestVersionArgsForCall []struct {
		name string
	}
	getLatestVersionReturns struct {
		result1 credentials.Credential
		result2 error
	}
	getLatestVersionReturnsOnCall map[int]struct {
		result1 credentials.Credential
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubGetter) GetLatestVersion(name string) (credentials.Credential, error) {
	fake.getLatestVersionMutex.Lock()
	ret, specificReturn := fake.getLatestVersionReturnsOnCall[len(fake.getLatestVersionArgsForCall)]
	fake.getLatestVersionArgsForCall = append(fake.getLatestVersionArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetLatestVersion", []interface{}{name})
	fake.getLatestVersionMutex.Unlock()
	if fake.GetLatestVersionStub != nil {
		return fake.GetLatestVersionStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLatestVersionReturns.result1, fake.getLatestVersionReturns.result2
}

func (fake *FakeCredhubGetter) GetLatestVersionCallCount() int {
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	return len(fake.getLatestVersionArgsForCall)
}

func (fake *FakeCredhubGetter) GetLatestVersionArgsForCall(i int) string {
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	return fake.getLatestVersionArgsForCall[i].name
}

func (fake *FakeCredhubGetter) GetLatestVersionReturns(result1 credentials.Credential, result2 error) {
	fake.GetLatestVersionStub = nil
	fake.getLatestVersionReturns = struct {
		result1 credentials.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubGetter) GetLatestVersionReturnsOnCall(i int, result1 credentials.Credential, result2 error) {
	fake.GetLatestVersionStub = nil
	if fake.getLatestVersionReturnsOnCall == nil {
		fake.getLatestVersionReturnsOnCall = make(map[int]struct {
			result1 credentials.Credential
			result2 error
		})
	}
	fake.getLatestVersionReturnsOnCall[i] = struct {
		result1 credentials.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credstore.CredhubGetter = new(FakeCredhubGetter)
