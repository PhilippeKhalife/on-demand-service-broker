// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	"github.com/pivotal-cf/on-demand-service-broker/network"
)

type FakeSleeper struct {
	Stub        func(duration time.Duration)
	mutex       sync.RWMutex
	argsForCall []struct {
		duration time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSleeper) Spy(duration time.Duration) {
	fake.mutex.Lock()
	fake.argsForCall = append(fake.argsForCall, struct {
		duration time.Duration
	}{duration})
	fake.recordInvocation("Sleeper", []interface{}{duration})
	fake.mutex.Unlock()
	if fake.Stub != nil {
		fake.Stub(duration)
	}
}

func (fake *FakeSleeper) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeSleeper) ArgsForCall(i int) time.Duration {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].duration
}

func (fake *FakeSleeper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSleeper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ network.Sleeper = new(FakeSleeper).Spy
