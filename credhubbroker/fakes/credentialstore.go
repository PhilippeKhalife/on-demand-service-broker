// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/credhub-cli/credhub/permissions"
	"github.com/pivotal-cf/on-demand-service-broker/credhubbroker"
)

type FakeCredentialStore struct {
	SetStub        func(key string, value interface{}) error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		key   string
		value interface{}
	}
	setReturns struct {
		result1 error
	}
	setReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(key string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		key string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	AuthenticateStub        func() error
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct{}
	authenticateReturns     struct {
		result1 error
	}
	authenticateReturnsOnCall map[int]struct {
		result1 error
	}
	AddPermissionsStub        func(credentialName string, perms []permissions.Permission) ([]permissions.Permission, error)
	addPermissionsMutex       sync.RWMutex
	addPermissionsArgsForCall []struct {
		credentialName string
		perms          []permissions.Permission
	}
	addPermissionsReturns struct {
		result1 []permissions.Permission
		result2 error
	}
	addPermissionsReturnsOnCall map[int]struct {
		result1 []permissions.Permission
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredentialStore) Set(key string, value interface{}) error {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		key   string
		value interface{}
	}{key, value})
	fake.recordInvocation("Set", []interface{}{key, value})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(key, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setReturns.result1
}

func (fake *FakeCredentialStore) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeCredentialStore) SetArgsForCall(i int) (string, interface{}) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].key, fake.setArgsForCall[i].value
}

func (fake *FakeCredentialStore) SetReturns(result1 error) {
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialStore) SetReturnsOnCall(i int, result1 error) {
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialStore) Delete(key string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("Delete", []interface{}{key})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeCredentialStore) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCredentialStore) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].key
}

func (fake *FakeCredentialStore) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialStore) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialStore) Authenticate() error {
	fake.authenticateMutex.Lock()
	ret, specificReturn := fake.authenticateReturnsOnCall[len(fake.authenticateArgsForCall)]
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct{}{})
	fake.recordInvocation("Authenticate", []interface{}{})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authenticateReturns.result1
}

func (fake *FakeCredentialStore) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakeCredentialStore) AuthenticateReturns(result1 error) {
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialStore) AuthenticateReturnsOnCall(i int, result1 error) {
	fake.AuthenticateStub = nil
	if fake.authenticateReturnsOnCall == nil {
		fake.authenticateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.authenticateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredentialStore) AddPermissions(credentialName string, perms []permissions.Permission) ([]permissions.Permission, error) {
	var permsCopy []permissions.Permission
	if perms != nil {
		permsCopy = make([]permissions.Permission, len(perms))
		copy(permsCopy, perms)
	}
	fake.addPermissionsMutex.Lock()
	ret, specificReturn := fake.addPermissionsReturnsOnCall[len(fake.addPermissionsArgsForCall)]
	fake.addPermissionsArgsForCall = append(fake.addPermissionsArgsForCall, struct {
		credentialName string
		perms          []permissions.Permission
	}{credentialName, permsCopy})
	fake.recordInvocation("AddPermissions", []interface{}{credentialName, permsCopy})
	fake.addPermissionsMutex.Unlock()
	if fake.AddPermissionsStub != nil {
		return fake.AddPermissionsStub(credentialName, perms)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addPermissionsReturns.result1, fake.addPermissionsReturns.result2
}

func (fake *FakeCredentialStore) AddPermissionsCallCount() int {
	fake.addPermissionsMutex.RLock()
	defer fake.addPermissionsMutex.RUnlock()
	return len(fake.addPermissionsArgsForCall)
}

func (fake *FakeCredentialStore) AddPermissionsArgsForCall(i int) (string, []permissions.Permission) {
	fake.addPermissionsMutex.RLock()
	defer fake.addPermissionsMutex.RUnlock()
	return fake.addPermissionsArgsForCall[i].credentialName, fake.addPermissionsArgsForCall[i].perms
}

func (fake *FakeCredentialStore) AddPermissionsReturns(result1 []permissions.Permission, result2 error) {
	fake.AddPermissionsStub = nil
	fake.addPermissionsReturns = struct {
		result1 []permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialStore) AddPermissionsReturnsOnCall(i int, result1 []permissions.Permission, result2 error) {
	fake.AddPermissionsStub = nil
	if fake.addPermissionsReturnsOnCall == nil {
		fake.addPermissionsReturnsOnCall = make(map[int]struct {
			result1 []permissions.Permission
			result2 error
		})
	}
	fake.addPermissionsReturnsOnCall[i] = struct {
		result1 []permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredentialStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	fake.addPermissionsMutex.RLock()
	defer fake.addPermissionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredentialStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhubbroker.CredentialStore = new(FakeCredentialStore)
