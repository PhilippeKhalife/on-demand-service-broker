// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/deregistrar"
)

type FakeCloudFoundryClient struct {
	GetServiceOfferingGUIDStub        func(string, *log.Logger) (string, error)
	getServiceOfferingGUIDMutex       sync.RWMutex
	getServiceOfferingGUIDArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getServiceOfferingGUIDReturns struct {
		result1 string
		result2 error
	}
	getServiceOfferingGUIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeregisterBrokerStub        func(string, *log.Logger) error
	deregisterBrokerMutex       sync.RWMutex
	deregisterBrokerArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	deregisterBrokerReturns struct {
		result1 error
	}
	deregisterBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) GetServiceOfferingGUID(arg1 string, arg2 *log.Logger) (string, error) {
	fake.getServiceOfferingGUIDMutex.Lock()
	ret, specificReturn := fake.getServiceOfferingGUIDReturnsOnCall[len(fake.getServiceOfferingGUIDArgsForCall)]
	fake.getServiceOfferingGUIDArgsForCall = append(fake.getServiceOfferingGUIDArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetServiceOfferingGUID", []interface{}{arg1, arg2})
	fake.getServiceOfferingGUIDMutex.Unlock()
	if fake.GetServiceOfferingGUIDStub != nil {
		return fake.GetServiceOfferingGUIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceOfferingGUIDReturns.result1, fake.getServiceOfferingGUIDReturns.result2
}

func (fake *FakeCloudFoundryClient) GetServiceOfferingGUIDCallCount() int {
	fake.getServiceOfferingGUIDMutex.RLock()
	defer fake.getServiceOfferingGUIDMutex.RUnlock()
	return len(fake.getServiceOfferingGUIDArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetServiceOfferingGUIDArgsForCall(i int) (string, *log.Logger) {
	fake.getServiceOfferingGUIDMutex.RLock()
	defer fake.getServiceOfferingGUIDMutex.RUnlock()
	return fake.getServiceOfferingGUIDArgsForCall[i].arg1, fake.getServiceOfferingGUIDArgsForCall[i].arg2
}

func (fake *FakeCloudFoundryClient) GetServiceOfferingGUIDReturns(result1 string, result2 error) {
	fake.GetServiceOfferingGUIDStub = nil
	fake.getServiceOfferingGUIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceOfferingGUIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetServiceOfferingGUIDStub = nil
	if fake.getServiceOfferingGUIDReturnsOnCall == nil {
		fake.getServiceOfferingGUIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getServiceOfferingGUIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) DeregisterBroker(arg1 string, arg2 *log.Logger) error {
	fake.deregisterBrokerMutex.Lock()
	ret, specificReturn := fake.deregisterBrokerReturnsOnCall[len(fake.deregisterBrokerArgsForCall)]
	fake.deregisterBrokerArgsForCall = append(fake.deregisterBrokerArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("DeregisterBroker", []interface{}{arg1, arg2})
	fake.deregisterBrokerMutex.Unlock()
	if fake.DeregisterBrokerStub != nil {
		return fake.DeregisterBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deregisterBrokerReturns.result1
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerCallCount() int {
	fake.deregisterBrokerMutex.RLock()
	defer fake.deregisterBrokerMutex.RUnlock()
	return len(fake.deregisterBrokerArgsForCall)
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerArgsForCall(i int) (string, *log.Logger) {
	fake.deregisterBrokerMutex.RLock()
	defer fake.deregisterBrokerMutex.RUnlock()
	return fake.deregisterBrokerArgsForCall[i].arg1, fake.deregisterBrokerArgsForCall[i].arg2
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerReturns(result1 error) {
	fake.DeregisterBrokerStub = nil
	fake.deregisterBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerReturnsOnCall(i int, result1 error) {
	fake.DeregisterBrokerStub = nil
	if fake.deregisterBrokerReturnsOnCall == nil {
		fake.deregisterBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deregisterBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServiceOfferingGUIDMutex.RLock()
	defer fake.getServiceOfferingGUIDMutex.RUnlock()
	fake.deregisterBrokerMutex.RLock()
	defer fake.deregisterBrokerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deregistrar.CloudFoundryClient = new(FakeCloudFoundryClient)
