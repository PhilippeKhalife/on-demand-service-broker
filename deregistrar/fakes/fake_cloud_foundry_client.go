// This file was generated by counterfeiter
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/cf"
	"github.com/pivotal-cf/on-demand-service-broker/deregistrar"
)

type FakeCloudFoundryClient struct {
	ListServiceBrokersStub        func(*log.Logger) ([]cf.ServiceBroker, error)
	listServiceBrokersMutex       sync.RWMutex
	listServiceBrokersArgsForCall []struct {
		arg1 *log.Logger
	}
	listServiceBrokersReturns struct {
		result1 []cf.ServiceBroker
		result2 error
	}
	listServiceBrokersReturnsOnCall map[int]struct {
		result1 []cf.ServiceBroker
		result2 error
	}
	DeregisterBrokerStub        func(string, *log.Logger) error
	deregisterBrokerMutex       sync.RWMutex
	deregisterBrokerArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	deregisterBrokerReturns struct {
		result1 error
	}
	deregisterBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) ListServiceBrokers(arg1 *log.Logger) ([]cf.ServiceBroker, error) {
	fake.listServiceBrokersMutex.Lock()
	ret, specificReturn := fake.listServiceBrokersReturnsOnCall[len(fake.listServiceBrokersArgsForCall)]
	fake.listServiceBrokersArgsForCall = append(fake.listServiceBrokersArgsForCall, struct {
		arg1 *log.Logger
	}{arg1})
	fake.recordInvocation("ListServiceBrokers", []interface{}{arg1})
	fake.listServiceBrokersMutex.Unlock()
	if fake.ListServiceBrokersStub != nil {
		return fake.ListServiceBrokersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listServiceBrokersReturns.result1, fake.listServiceBrokersReturns.result2
}

func (fake *FakeCloudFoundryClient) ListServiceBrokersCallCount() int {
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	return len(fake.listServiceBrokersArgsForCall)
}

func (fake *FakeCloudFoundryClient) ListServiceBrokersArgsForCall(i int) *log.Logger {
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	return fake.listServiceBrokersArgsForCall[i].arg1
}

func (fake *FakeCloudFoundryClient) ListServiceBrokersReturns(result1 []cf.ServiceBroker, result2 error) {
	fake.ListServiceBrokersStub = nil
	fake.listServiceBrokersReturns = struct {
		result1 []cf.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) ListServiceBrokersReturnsOnCall(i int, result1 []cf.ServiceBroker, result2 error) {
	fake.ListServiceBrokersStub = nil
	if fake.listServiceBrokersReturnsOnCall == nil {
		fake.listServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 []cf.ServiceBroker
			result2 error
		})
	}
	fake.listServiceBrokersReturnsOnCall[i] = struct {
		result1 []cf.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) DeregisterBroker(arg1 string, arg2 *log.Logger) error {
	fake.deregisterBrokerMutex.Lock()
	ret, specificReturn := fake.deregisterBrokerReturnsOnCall[len(fake.deregisterBrokerArgsForCall)]
	fake.deregisterBrokerArgsForCall = append(fake.deregisterBrokerArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("DeregisterBroker", []interface{}{arg1, arg2})
	fake.deregisterBrokerMutex.Unlock()
	if fake.DeregisterBrokerStub != nil {
		return fake.DeregisterBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deregisterBrokerReturns.result1
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerCallCount() int {
	fake.deregisterBrokerMutex.RLock()
	defer fake.deregisterBrokerMutex.RUnlock()
	return len(fake.deregisterBrokerArgsForCall)
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerArgsForCall(i int) (string, *log.Logger) {
	fake.deregisterBrokerMutex.RLock()
	defer fake.deregisterBrokerMutex.RUnlock()
	return fake.deregisterBrokerArgsForCall[i].arg1, fake.deregisterBrokerArgsForCall[i].arg2
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerReturns(result1 error) {
	fake.DeregisterBrokerStub = nil
	fake.deregisterBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeregisterBrokerReturnsOnCall(i int, result1 error) {
	fake.DeregisterBrokerStub = nil
	if fake.deregisterBrokerReturnsOnCall == nil {
		fake.deregisterBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deregisterBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	fake.deregisterBrokerMutex.RLock()
	defer fake.deregisterBrokerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deregistrar.CloudFoundryClient = new(FakeCloudFoundryClient)
