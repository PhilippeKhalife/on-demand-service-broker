// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/boshdirector"
)

type FakeHTTP struct {
	RawGetStub        func(path string) (string, error)
	rawGetMutex       sync.RWMutex
	rawGetArgsForCall []struct {
		path string
	}
	rawGetReturns struct {
		result1 string
		result2 error
	}
	rawGetReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RawPostStub        func(path, data, contentType string) (string, error)
	rawPostMutex       sync.RWMutex
	rawPostArgsForCall []struct {
		path        string
		data        string
		contentType string
	}
	rawPostReturns struct {
		result1 string
		result2 error
	}
	rawPostReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RawDeleteStub        func(path string) (string, error)
	rawDeleteMutex       sync.RWMutex
	rawDeleteArgsForCall []struct {
		path string
	}
	rawDeleteReturns struct {
		result1 string
		result2 error
	}
	rawDeleteReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHTTP) RawGet(path string) (string, error) {
	fake.rawGetMutex.Lock()
	ret, specificReturn := fake.rawGetReturnsOnCall[len(fake.rawGetArgsForCall)]
	fake.rawGetArgsForCall = append(fake.rawGetArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("RawGet", []interface{}{path})
	fake.rawGetMutex.Unlock()
	if fake.RawGetStub != nil {
		return fake.RawGetStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rawGetReturns.result1, fake.rawGetReturns.result2
}

func (fake *FakeHTTP) RawGetCallCount() int {
	fake.rawGetMutex.RLock()
	defer fake.rawGetMutex.RUnlock()
	return len(fake.rawGetArgsForCall)
}

func (fake *FakeHTTP) RawGetArgsForCall(i int) string {
	fake.rawGetMutex.RLock()
	defer fake.rawGetMutex.RUnlock()
	return fake.rawGetArgsForCall[i].path
}

func (fake *FakeHTTP) RawGetReturns(result1 string, result2 error) {
	fake.RawGetStub = nil
	fake.rawGetReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTP) RawGetReturnsOnCall(i int, result1 string, result2 error) {
	fake.RawGetStub = nil
	if fake.rawGetReturnsOnCall == nil {
		fake.rawGetReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.rawGetReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTP) RawPost(path string, data string, contentType string) (string, error) {
	fake.rawPostMutex.Lock()
	ret, specificReturn := fake.rawPostReturnsOnCall[len(fake.rawPostArgsForCall)]
	fake.rawPostArgsForCall = append(fake.rawPostArgsForCall, struct {
		path        string
		data        string
		contentType string
	}{path, data, contentType})
	fake.recordInvocation("RawPost", []interface{}{path, data, contentType})
	fake.rawPostMutex.Unlock()
	if fake.RawPostStub != nil {
		return fake.RawPostStub(path, data, contentType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rawPostReturns.result1, fake.rawPostReturns.result2
}

func (fake *FakeHTTP) RawPostCallCount() int {
	fake.rawPostMutex.RLock()
	defer fake.rawPostMutex.RUnlock()
	return len(fake.rawPostArgsForCall)
}

func (fake *FakeHTTP) RawPostArgsForCall(i int) (string, string, string) {
	fake.rawPostMutex.RLock()
	defer fake.rawPostMutex.RUnlock()
	return fake.rawPostArgsForCall[i].path, fake.rawPostArgsForCall[i].data, fake.rawPostArgsForCall[i].contentType
}

func (fake *FakeHTTP) RawPostReturns(result1 string, result2 error) {
	fake.RawPostStub = nil
	fake.rawPostReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTP) RawPostReturnsOnCall(i int, result1 string, result2 error) {
	fake.RawPostStub = nil
	if fake.rawPostReturnsOnCall == nil {
		fake.rawPostReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.rawPostReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTP) RawDelete(path string) (string, error) {
	fake.rawDeleteMutex.Lock()
	ret, specificReturn := fake.rawDeleteReturnsOnCall[len(fake.rawDeleteArgsForCall)]
	fake.rawDeleteArgsForCall = append(fake.rawDeleteArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("RawDelete", []interface{}{path})
	fake.rawDeleteMutex.Unlock()
	if fake.RawDeleteStub != nil {
		return fake.RawDeleteStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rawDeleteReturns.result1, fake.rawDeleteReturns.result2
}

func (fake *FakeHTTP) RawDeleteCallCount() int {
	fake.rawDeleteMutex.RLock()
	defer fake.rawDeleteMutex.RUnlock()
	return len(fake.rawDeleteArgsForCall)
}

func (fake *FakeHTTP) RawDeleteArgsForCall(i int) string {
	fake.rawDeleteMutex.RLock()
	defer fake.rawDeleteMutex.RUnlock()
	return fake.rawDeleteArgsForCall[i].path
}

func (fake *FakeHTTP) RawDeleteReturns(result1 string, result2 error) {
	fake.RawDeleteStub = nil
	fake.rawDeleteReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTP) RawDeleteReturnsOnCall(i int, result1 string, result2 error) {
	fake.RawDeleteStub = nil
	if fake.rawDeleteReturnsOnCall == nil {
		fake.rawDeleteReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.rawDeleteReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTP) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rawGetMutex.RLock()
	defer fake.rawGetMutex.RUnlock()
	fake.rawPostMutex.RLock()
	defer fake.rawPostMutex.RUnlock()
	fake.rawDeleteMutex.RLock()
	defer fake.rawDeleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHTTP) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ boshdirector.HTTP = new(FakeHTTP)
