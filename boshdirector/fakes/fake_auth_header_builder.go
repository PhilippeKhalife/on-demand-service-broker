// This file was generated by counterfeiter
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/boshdirector"
)

type FakeAuthHeaderBuilder struct {
	BuildStub        func(logger *log.Logger) (string, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		logger *log.Logger
	}
	buildReturns struct {
		result1 string
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthHeaderBuilder) Build(logger *log.Logger) (string, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		logger *log.Logger
	}{logger})
	fake.recordInvocation("Build", []interface{}{logger})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.buildReturns.result1, fake.buildReturns.result2
}

func (fake *FakeAuthHeaderBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeAuthHeaderBuilder) BuildArgsForCall(i int) *log.Logger {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.buildArgsForCall[i].logger
}

func (fake *FakeAuthHeaderBuilder) BuildReturns(result1 string, result2 error) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthHeaderBuilder) BuildReturnsOnCall(i int, result1 string, result2 error) {
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthHeaderBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAuthHeaderBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ boshdirector.AuthHeaderBuilder = new(FakeAuthHeaderBuilder)
