// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/service"
)

type FakeListerClient struct {
	GetInstancesOfServiceOfferingStub        func(string, *log.Logger) ([]service.Instance, error)
	getInstancesOfServiceOfferingMutex       sync.RWMutex
	getInstancesOfServiceOfferingArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getInstancesOfServiceOfferingReturns struct {
		result1 []service.Instance
		result2 error
	}
	getInstancesOfServiceOfferingReturnsOnCall map[int]struct {
		result1 []service.Instance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeListerClient) GetInstancesOfServiceOffering(arg1 string, arg2 *log.Logger) ([]service.Instance, error) {
	fake.getInstancesOfServiceOfferingMutex.Lock()
	ret, specificReturn := fake.getInstancesOfServiceOfferingReturnsOnCall[len(fake.getInstancesOfServiceOfferingArgsForCall)]
	fake.getInstancesOfServiceOfferingArgsForCall = append(fake.getInstancesOfServiceOfferingArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetInstancesOfServiceOffering", []interface{}{arg1, arg2})
	fake.getInstancesOfServiceOfferingMutex.Unlock()
	if fake.GetInstancesOfServiceOfferingStub != nil {
		return fake.GetInstancesOfServiceOfferingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInstancesOfServiceOfferingReturns.result1, fake.getInstancesOfServiceOfferingReturns.result2
}

func (fake *FakeListerClient) GetInstancesOfServiceOfferingCallCount() int {
	fake.getInstancesOfServiceOfferingMutex.RLock()
	defer fake.getInstancesOfServiceOfferingMutex.RUnlock()
	return len(fake.getInstancesOfServiceOfferingArgsForCall)
}

func (fake *FakeListerClient) GetInstancesOfServiceOfferingArgsForCall(i int) (string, *log.Logger) {
	fake.getInstancesOfServiceOfferingMutex.RLock()
	defer fake.getInstancesOfServiceOfferingMutex.RUnlock()
	return fake.getInstancesOfServiceOfferingArgsForCall[i].arg1, fake.getInstancesOfServiceOfferingArgsForCall[i].arg2
}

func (fake *FakeListerClient) GetInstancesOfServiceOfferingReturns(result1 []service.Instance, result2 error) {
	fake.GetInstancesOfServiceOfferingStub = nil
	fake.getInstancesOfServiceOfferingReturns = struct {
		result1 []service.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeListerClient) GetInstancesOfServiceOfferingReturnsOnCall(i int, result1 []service.Instance, result2 error) {
	fake.GetInstancesOfServiceOfferingStub = nil
	if fake.getInstancesOfServiceOfferingReturnsOnCall == nil {
		fake.getInstancesOfServiceOfferingReturnsOnCall = make(map[int]struct {
			result1 []service.Instance
			result2 error
		})
	}
	fake.getInstancesOfServiceOfferingReturnsOnCall[i] = struct {
		result1 []service.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeListerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInstancesOfServiceOfferingMutex.RLock()
	defer fake.getInstancesOfServiceOfferingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeListerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.ListerClient = new(FakeListerClient)
