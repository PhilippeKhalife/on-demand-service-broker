// This file was generated by counterfeiter
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/task"
	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

type FakeServiceAdapterClient struct {
	GenerateManifestStub        func(serviceReleases serviceadapter.ServiceDeployment, plan serviceadapter.Plan, requestParams map[string]interface{}, previousManifest []byte, previousPlan *serviceadapter.Plan, logger *log.Logger) ([]byte, error)
	generateManifestMutex       sync.RWMutex
	generateManifestArgsForCall []struct {
		serviceReleases  serviceadapter.ServiceDeployment
		plan             serviceadapter.Plan
		requestParams    map[string]interface{}
		previousManifest []byte
		previousPlan     *serviceadapter.Plan
		logger           *log.Logger
	}
	generateManifestReturns struct {
		result1 []byte
		result2 error
	}
	generateManifestReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceAdapterClient) GenerateManifest(serviceReleases serviceadapter.ServiceDeployment, plan serviceadapter.Plan, requestParams map[string]interface{}, previousManifest []byte, previousPlan *serviceadapter.Plan, logger *log.Logger) ([]byte, error) {
	var previousManifestCopy []byte
	if previousManifest != nil {
		previousManifestCopy = make([]byte, len(previousManifest))
		copy(previousManifestCopy, previousManifest)
	}
	fake.generateManifestMutex.Lock()
	ret, specificReturn := fake.generateManifestReturnsOnCall[len(fake.generateManifestArgsForCall)]
	fake.generateManifestArgsForCall = append(fake.generateManifestArgsForCall, struct {
		serviceReleases  serviceadapter.ServiceDeployment
		plan             serviceadapter.Plan
		requestParams    map[string]interface{}
		previousManifest []byte
		previousPlan     *serviceadapter.Plan
		logger           *log.Logger
	}{serviceReleases, plan, requestParams, previousManifestCopy, previousPlan, logger})
	fake.recordInvocation("GenerateManifest", []interface{}{serviceReleases, plan, requestParams, previousManifestCopy, previousPlan, logger})
	fake.generateManifestMutex.Unlock()
	if fake.GenerateManifestStub != nil {
		return fake.GenerateManifestStub(serviceReleases, plan, requestParams, previousManifest, previousPlan, logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateManifestReturns.result1, fake.generateManifestReturns.result2
}

func (fake *FakeServiceAdapterClient) GenerateManifestCallCount() int {
	fake.generateManifestMutex.RLock()
	defer fake.generateManifestMutex.RUnlock()
	return len(fake.generateManifestArgsForCall)
}

func (fake *FakeServiceAdapterClient) GenerateManifestArgsForCall(i int) (serviceadapter.ServiceDeployment, serviceadapter.Plan, map[string]interface{}, []byte, *serviceadapter.Plan, *log.Logger) {
	fake.generateManifestMutex.RLock()
	defer fake.generateManifestMutex.RUnlock()
	return fake.generateManifestArgsForCall[i].serviceReleases, fake.generateManifestArgsForCall[i].plan, fake.generateManifestArgsForCall[i].requestParams, fake.generateManifestArgsForCall[i].previousManifest, fake.generateManifestArgsForCall[i].previousPlan, fake.generateManifestArgsForCall[i].logger
}

func (fake *FakeServiceAdapterClient) GenerateManifestReturns(result1 []byte, result2 error) {
	fake.GenerateManifestStub = nil
	fake.generateManifestReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) GenerateManifestReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GenerateManifestStub = nil
	if fake.generateManifestReturnsOnCall == nil {
		fake.generateManifestReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.generateManifestReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceAdapterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateManifestMutex.RLock()
	defer fake.generateManifestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServiceAdapterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ task.ServiceAdapterClient = new(FakeServiceAdapterClient)
