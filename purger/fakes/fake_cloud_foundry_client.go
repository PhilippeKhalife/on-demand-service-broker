// This file was generated by counterfeiter
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/purger"
)

type FakeCloudFoundryClient struct {
	DisableServiceAccessForServiceOfferingStub        func(serviceOfferingID string, logger *log.Logger) error
	disableServiceAccessForServiceOfferingMutex       sync.RWMutex
	disableServiceAccessForServiceOfferingArgsForCall []struct {
		serviceOfferingID string
		logger            *log.Logger
	}
	disableServiceAccessForServiceOfferingReturns struct {
		result1 error
	}
	disableServiceAccessForServiceOfferingReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForServiceOffering(serviceOfferingID string, logger *log.Logger) error {
	fake.disableServiceAccessForServiceOfferingMutex.Lock()
	ret, specificReturn := fake.disableServiceAccessForServiceOfferingReturnsOnCall[len(fake.disableServiceAccessForServiceOfferingArgsForCall)]
	fake.disableServiceAccessForServiceOfferingArgsForCall = append(fake.disableServiceAccessForServiceOfferingArgsForCall, struct {
		serviceOfferingID string
		logger            *log.Logger
	}{serviceOfferingID, logger})
	fake.recordInvocation("DisableServiceAccessForServiceOffering", []interface{}{serviceOfferingID, logger})
	fake.disableServiceAccessForServiceOfferingMutex.Unlock()
	if fake.DisableServiceAccessForServiceOfferingStub != nil {
		return fake.DisableServiceAccessForServiceOfferingStub(serviceOfferingID, logger)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.disableServiceAccessForServiceOfferingReturns.result1
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForServiceOfferingCallCount() int {
	fake.disableServiceAccessForServiceOfferingMutex.RLock()
	defer fake.disableServiceAccessForServiceOfferingMutex.RUnlock()
	return len(fake.disableServiceAccessForServiceOfferingArgsForCall)
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForServiceOfferingArgsForCall(i int) (string, *log.Logger) {
	fake.disableServiceAccessForServiceOfferingMutex.RLock()
	defer fake.disableServiceAccessForServiceOfferingMutex.RUnlock()
	return fake.disableServiceAccessForServiceOfferingArgsForCall[i].serviceOfferingID, fake.disableServiceAccessForServiceOfferingArgsForCall[i].logger
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForServiceOfferingReturns(result1 error) {
	fake.DisableServiceAccessForServiceOfferingStub = nil
	fake.disableServiceAccessForServiceOfferingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForServiceOfferingReturnsOnCall(i int, result1 error) {
	fake.DisableServiceAccessForServiceOfferingStub = nil
	if fake.disableServiceAccessForServiceOfferingReturnsOnCall == nil {
		fake.disableServiceAccessForServiceOfferingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableServiceAccessForServiceOfferingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableServiceAccessForServiceOfferingMutex.RLock()
	defer fake.disableServiceAccessForServiceOfferingMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ purger.CloudFoundryClient = new(FakeCloudFoundryClient)
