// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/broker/services"
	"github.com/pivotal-cf/on-demand-service-broker/service"
	"github.com/pivotal-cf/on-demand-service-broker/upgrader"
)

type FakeTriggerer struct {
	TriggerOperationStub        func(service.Instance) (services.BOSHOperation, error)
	triggerOperationMutex       sync.RWMutex
	triggerOperationArgsForCall []struct {
		arg1 service.Instance
	}
	triggerOperationReturns struct {
		result1 services.BOSHOperation
		result2 error
	}
	triggerOperationReturnsOnCall map[int]struct {
		result1 services.BOSHOperation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTriggerer) TriggerOperation(arg1 service.Instance) (services.BOSHOperation, error) {
	fake.triggerOperationMutex.Lock()
	ret, specificReturn := fake.triggerOperationReturnsOnCall[len(fake.triggerOperationArgsForCall)]
	fake.triggerOperationArgsForCall = append(fake.triggerOperationArgsForCall, struct {
		arg1 service.Instance
	}{arg1})
	fake.recordInvocation("TriggerOperation", []interface{}{arg1})
	fake.triggerOperationMutex.Unlock()
	if fake.TriggerOperationStub != nil {
		return fake.TriggerOperationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.triggerOperationReturns.result1, fake.triggerOperationReturns.result2
}

func (fake *FakeTriggerer) TriggerOperationCallCount() int {
	fake.triggerOperationMutex.RLock()
	defer fake.triggerOperationMutex.RUnlock()
	return len(fake.triggerOperationArgsForCall)
}

func (fake *FakeTriggerer) TriggerOperationArgsForCall(i int) service.Instance {
	fake.triggerOperationMutex.RLock()
	defer fake.triggerOperationMutex.RUnlock()
	return fake.triggerOperationArgsForCall[i].arg1
}

func (fake *FakeTriggerer) TriggerOperationReturns(result1 services.BOSHOperation, result2 error) {
	fake.TriggerOperationStub = nil
	fake.triggerOperationReturns = struct {
		result1 services.BOSHOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeTriggerer) TriggerOperationReturnsOnCall(i int, result1 services.BOSHOperation, result2 error) {
	fake.TriggerOperationStub = nil
	if fake.triggerOperationReturnsOnCall == nil {
		fake.triggerOperationReturnsOnCall = make(map[int]struct {
			result1 services.BOSHOperation
			result2 error
		})
	}
	fake.triggerOperationReturnsOnCall[i] = struct {
		result1 services.BOSHOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeTriggerer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.triggerOperationMutex.RLock()
	defer fake.triggerOperationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTriggerer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ upgrader.Triggerer = new(FakeTriggerer)
