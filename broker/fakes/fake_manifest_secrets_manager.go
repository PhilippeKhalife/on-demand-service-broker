// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/boshdirector"
	"github.com/pivotal-cf/on-demand-service-broker/broker"
)

type FakeManifestSecretManager struct {
	ResolveManifestSecretsStub        func(manifest []byte, deploymentVariables []boshdirector.Variable, logger *log.Logger) (map[string]string, error)
	resolveManifestSecretsMutex       sync.RWMutex
	resolveManifestSecretsArgsForCall []struct {
		manifest            []byte
		deploymentVariables []boshdirector.Variable
		logger              *log.Logger
	}
	resolveManifestSecretsReturns struct {
		result1 map[string]string
		result2 error
	}
	resolveManifestSecretsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	DeleteSecretsForInstanceStub        func(instanceID string, logger *log.Logger) error
	deleteSecretsForInstanceMutex       sync.RWMutex
	deleteSecretsForInstanceArgsForCall []struct {
		instanceID string
		logger     *log.Logger
	}
	deleteSecretsForInstanceReturns struct {
		result1 error
	}
	deleteSecretsForInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestSecretManager) ResolveManifestSecrets(manifest []byte, deploymentVariables []boshdirector.Variable, logger *log.Logger) (map[string]string, error) {
	var manifestCopy []byte
	if manifest != nil {
		manifestCopy = make([]byte, len(manifest))
		copy(manifestCopy, manifest)
	}
	var deploymentVariablesCopy []boshdirector.Variable
	if deploymentVariables != nil {
		deploymentVariablesCopy = make([]boshdirector.Variable, len(deploymentVariables))
		copy(deploymentVariablesCopy, deploymentVariables)
	}
	fake.resolveManifestSecretsMutex.Lock()
	ret, specificReturn := fake.resolveManifestSecretsReturnsOnCall[len(fake.resolveManifestSecretsArgsForCall)]
	fake.resolveManifestSecretsArgsForCall = append(fake.resolveManifestSecretsArgsForCall, struct {
		manifest            []byte
		deploymentVariables []boshdirector.Variable
		logger              *log.Logger
	}{manifestCopy, deploymentVariablesCopy, logger})
	fake.recordInvocation("ResolveManifestSecrets", []interface{}{manifestCopy, deploymentVariablesCopy, logger})
	fake.resolveManifestSecretsMutex.Unlock()
	if fake.ResolveManifestSecretsStub != nil {
		return fake.ResolveManifestSecretsStub(manifest, deploymentVariables, logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resolveManifestSecretsReturns.result1, fake.resolveManifestSecretsReturns.result2
}

func (fake *FakeManifestSecretManager) ResolveManifestSecretsCallCount() int {
	fake.resolveManifestSecretsMutex.RLock()
	defer fake.resolveManifestSecretsMutex.RUnlock()
	return len(fake.resolveManifestSecretsArgsForCall)
}

func (fake *FakeManifestSecretManager) ResolveManifestSecretsArgsForCall(i int) ([]byte, []boshdirector.Variable, *log.Logger) {
	fake.resolveManifestSecretsMutex.RLock()
	defer fake.resolveManifestSecretsMutex.RUnlock()
	return fake.resolveManifestSecretsArgsForCall[i].manifest, fake.resolveManifestSecretsArgsForCall[i].deploymentVariables, fake.resolveManifestSecretsArgsForCall[i].logger
}

func (fake *FakeManifestSecretManager) ResolveManifestSecretsReturns(result1 map[string]string, result2 error) {
	fake.ResolveManifestSecretsStub = nil
	fake.resolveManifestSecretsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestSecretManager) ResolveManifestSecretsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.ResolveManifestSecretsStub = nil
	if fake.resolveManifestSecretsReturnsOnCall == nil {
		fake.resolveManifestSecretsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.resolveManifestSecretsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestSecretManager) DeleteSecretsForInstance(instanceID string, logger *log.Logger) error {
	fake.deleteSecretsForInstanceMutex.Lock()
	ret, specificReturn := fake.deleteSecretsForInstanceReturnsOnCall[len(fake.deleteSecretsForInstanceArgsForCall)]
	fake.deleteSecretsForInstanceArgsForCall = append(fake.deleteSecretsForInstanceArgsForCall, struct {
		instanceID string
		logger     *log.Logger
	}{instanceID, logger})
	fake.recordInvocation("DeleteSecretsForInstance", []interface{}{instanceID, logger})
	fake.deleteSecretsForInstanceMutex.Unlock()
	if fake.DeleteSecretsForInstanceStub != nil {
		return fake.DeleteSecretsForInstanceStub(instanceID, logger)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteSecretsForInstanceReturns.result1
}

func (fake *FakeManifestSecretManager) DeleteSecretsForInstanceCallCount() int {
	fake.deleteSecretsForInstanceMutex.RLock()
	defer fake.deleteSecretsForInstanceMutex.RUnlock()
	return len(fake.deleteSecretsForInstanceArgsForCall)
}

func (fake *FakeManifestSecretManager) DeleteSecretsForInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.deleteSecretsForInstanceMutex.RLock()
	defer fake.deleteSecretsForInstanceMutex.RUnlock()
	return fake.deleteSecretsForInstanceArgsForCall[i].instanceID, fake.deleteSecretsForInstanceArgsForCall[i].logger
}

func (fake *FakeManifestSecretManager) DeleteSecretsForInstanceReturns(result1 error) {
	fake.DeleteSecretsForInstanceStub = nil
	fake.deleteSecretsForInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManifestSecretManager) DeleteSecretsForInstanceReturnsOnCall(i int, result1 error) {
	fake.DeleteSecretsForInstanceStub = nil
	if fake.deleteSecretsForInstanceReturnsOnCall == nil {
		fake.deleteSecretsForInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecretsForInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManifestSecretManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveManifestSecretsMutex.RLock()
	defer fake.resolveManifestSecretsMutex.RUnlock()
	fake.deleteSecretsForInstanceMutex.RLock()
	defer fake.deleteSecretsForInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestSecretManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.ManifestSecretManager = new(FakeManifestSecretManager)
