// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/broker"
)

type FakeManifestSecretResolver struct {
	ResolveManifestSecretsStub        func(manifest []byte) (map[string]string, error)
	resolveManifestSecretsMutex       sync.RWMutex
	resolveManifestSecretsArgsForCall []struct {
		manifest []byte
	}
	resolveManifestSecretsReturns struct {
		result1 map[string]string
		result2 error
	}
	resolveManifestSecretsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestSecretResolver) ResolveManifestSecrets(manifest []byte) (map[string]string, error) {
	var manifestCopy []byte
	if manifest != nil {
		manifestCopy = make([]byte, len(manifest))
		copy(manifestCopy, manifest)
	}
	fake.resolveManifestSecretsMutex.Lock()
	ret, specificReturn := fake.resolveManifestSecretsReturnsOnCall[len(fake.resolveManifestSecretsArgsForCall)]
	fake.resolveManifestSecretsArgsForCall = append(fake.resolveManifestSecretsArgsForCall, struct {
		manifest []byte
	}{manifestCopy})
	fake.recordInvocation("ResolveManifestSecrets", []interface{}{manifestCopy})
	fake.resolveManifestSecretsMutex.Unlock()
	if fake.ResolveManifestSecretsStub != nil {
		return fake.ResolveManifestSecretsStub(manifest)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resolveManifestSecretsReturns.result1, fake.resolveManifestSecretsReturns.result2
}

func (fake *FakeManifestSecretResolver) ResolveManifestSecretsCallCount() int {
	fake.resolveManifestSecretsMutex.RLock()
	defer fake.resolveManifestSecretsMutex.RUnlock()
	return len(fake.resolveManifestSecretsArgsForCall)
}

func (fake *FakeManifestSecretResolver) ResolveManifestSecretsArgsForCall(i int) []byte {
	fake.resolveManifestSecretsMutex.RLock()
	defer fake.resolveManifestSecretsMutex.RUnlock()
	return fake.resolveManifestSecretsArgsForCall[i].manifest
}

func (fake *FakeManifestSecretResolver) ResolveManifestSecretsReturns(result1 map[string]string, result2 error) {
	fake.ResolveManifestSecretsStub = nil
	fake.resolveManifestSecretsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestSecretResolver) ResolveManifestSecretsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.ResolveManifestSecretsStub = nil
	if fake.resolveManifestSecretsReturnsOnCall == nil {
		fake.resolveManifestSecretsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.resolveManifestSecretsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestSecretResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveManifestSecretsMutex.RLock()
	defer fake.resolveManifestSecretsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestSecretResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.ManifestSecretResolver = new(FakeManifestSecretResolver)
