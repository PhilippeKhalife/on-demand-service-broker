// Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
// This program and the accompanying materials are made available under the terms of the under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/broker"
)

type FakeCredhubClient struct {
	PutCredentialsStub        func(identifier string, credentialsMap map[string]interface{}) error
	putCredentialsMutex       sync.RWMutex
	putCredentialsArgsForCall []struct {
		identifier     string
		credentialsMap map[string]interface{}
	}
	putCredentialsReturns struct {
		result1 error
	}
	putCredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubClient) PutCredentials(identifier string, credentialsMap map[string]interface{}) error {
	fake.putCredentialsMutex.Lock()
	ret, specificReturn := fake.putCredentialsReturnsOnCall[len(fake.putCredentialsArgsForCall)]
	fake.putCredentialsArgsForCall = append(fake.putCredentialsArgsForCall, struct {
		identifier     string
		credentialsMap map[string]interface{}
	}{identifier, credentialsMap})
	fake.recordInvocation("PutCredentials", []interface{}{identifier, credentialsMap})
	fake.putCredentialsMutex.Unlock()
	if fake.PutCredentialsStub != nil {
		return fake.PutCredentialsStub(identifier, credentialsMap)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.putCredentialsReturns.result1
}

func (fake *FakeCredhubClient) PutCredentialsCallCount() int {
	fake.putCredentialsMutex.RLock()
	defer fake.putCredentialsMutex.RUnlock()
	return len(fake.putCredentialsArgsForCall)
}

func (fake *FakeCredhubClient) PutCredentialsArgsForCall(i int) (string, map[string]interface{}) {
	fake.putCredentialsMutex.RLock()
	defer fake.putCredentialsMutex.RUnlock()
	return fake.putCredentialsArgsForCall[i].identifier, fake.putCredentialsArgsForCall[i].credentialsMap
}

func (fake *FakeCredhubClient) PutCredentialsReturns(result1 error) {
	fake.PutCredentialsStub = nil
	fake.putCredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubClient) PutCredentialsReturnsOnCall(i int, result1 error) {
	fake.PutCredentialsStub = nil
	if fake.putCredentialsReturnsOnCall == nil {
		fake.putCredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putCredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putCredentialsMutex.RLock()
	defer fake.putCredentialsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCredhubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.CredhubClient = new(FakeCredhubClient)
