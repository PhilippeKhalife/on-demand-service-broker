// Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
// This program and the accompanying materials are made available under the terms of the under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

// This file was generated by counterfeiter
package fake_command_runner

import (
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/adapterclient"
)

type FakeCommandRunner struct {
	RunStub        func(arg ...string) ([]byte, []byte, *int, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg []string
	}
	runReturns struct {
		result1 []byte
		result2 []byte
		result3 *int
		result4 error
	}
	runReturnsOnCall map[int]struct {
		result1 []byte
		result2 []byte
		result3 *int
		result4 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandRunner) Run(arg ...string) ([]byte, []byte, *int, error) {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg []string
	}{arg})
	fake.recordInvocation("Run", []interface{}{arg})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg...)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.runReturns.result1, fake.runReturns.result2, fake.runReturns.result3, fake.runReturns.result4
}

func (fake *FakeCommandRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCommandRunner) RunArgsForCall(i int) []string {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].arg
}

func (fake *FakeCommandRunner) RunReturns(result1 []byte, result2 []byte, result3 *int, result4 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 []byte
		result2 []byte
		result3 *int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCommandRunner) RunReturnsOnCall(i int, result1 []byte, result2 []byte, result3 *int, result4 error) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 []byte
			result3 *int
			result4 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 []byte
		result2 []byte
		result3 *int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCommandRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCommandRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapterclient.CommandRunner = new(FakeCommandRunner)
